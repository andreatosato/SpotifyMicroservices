@page "/spotify"
@using Dapr.Client
@using Microsoft.AspNetCore.SignalR.Client
@using Spotify.Shared.Models;
@inject IJSRuntime runtime
@inject DaprClient daprClient

<MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">Device Session Id: @(deviceId)</MudText>
<MudGrid>
    <MudItem xs="12" sm="12" md="12">
        <MudTextField T="string" ValueChanged="@OnSelect" Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" AdornmentColor="Color.Secondary" />
    </MudItem>
</MudGrid>
<SpotifyComponent Artists="@artists" Albums="@albums" Songs="@songs" ></SpotifyComponent>

@code {
    private HubConnection connection;
    private IEnumerable<Album> albums;
    private IEnumerable<Song> songs;
    private IEnumerable<Artist> artists;
    private string deviceId = Guid.NewGuid().ToString();

    protected override void OnInitialized()
    {
        var url = "http://spotifyfrontend/notification";
        connection = new HubConnectionBuilder()
            .WithUrl(url)
            .WithAutomaticReconnect()
            .Build();
        connection.On<IEnumerable<Album>>("albumNews", OnAlbumProcessed);
        connection.On<IEnumerable<Song>>("songsNews", OnSongsProcessed);
        connection.On<IEnumerable<Artist>>("artistsNews", OnArtistsProcessed);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await connection.StartAsync();
            await connection.SendAsync("SetDeviceId", deviceId);
        }
    }

    private async Task OnSelect(string search)
    {
        await daprClient.InvokeMethodAsync(HttpMethod.Get, "spotifybackend", $"api/Spotify/{deviceId}/search?q={search}");
    }

    private Task OnAlbumProcessed(IEnumerable<Album> @event)
    {
        albums = @event;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnArtistsProcessed(IEnumerable<Artist> @event)
    {
        artists = @event;
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private Task OnSongsProcessed(IEnumerable<Song> @event)
    {
        songs = @event;
        StateHasChanged();
        return Task.CompletedTask;
    }
}
