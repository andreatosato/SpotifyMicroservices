@page "/spotify"
@using Dapr.Client
@using Microsoft.AspNetCore.SignalR.Client
@using Spotify.Shared;
@using Spotify.Shared.Models;

@inject IJSRuntime runtime
@inject DaprClient daprClient

<MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">Device Session Id: @(deviceId)</MudText>
<MudExpansionPanels MultiExpansion="false" Color="">
    <MudExpansionPanel Text="Search">
        <TitleContent>
            <div class="d-flex">
                <MudIcon Icon="@Icons.Material.Filled.Search" class="mr-3" Color="Color.Primary"></MudIcon>
                <MudText Color="Color.Primary">Search</MudText>
            </div>
        </TitleContent>
        <ChildContent>
             <MudGrid>
                <MudItem xs="12" sm="12" md="12">
                    <MudTextField T="string" ValueChanged="@OnSelect" Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" AdornmentColor="Color.Secondary" Style="color:red;" />
                </MudItem>
            </MudGrid>
            <SpotifyComponent Artists="@artists" Albums="@albums" Songs="@songs"></SpotifyComponent>
        </ChildContent>
    </MudExpansionPanel>
    <MudExpansionPanel>
        <TitleContent>
            <div class="d-flex">
                <MudIcon Icon="@Icons.Material.Filled.SavedSearch" class="mr-3" Color="Color.Primary"></MudIcon>
                <MudText Color="Color.Primary">Latest Searches</MudText>
            </div>
        </TitleContent>
        <ChildContent>
            <MudGrid>
                <MudItem xs="12" sm="12" md="12">
                    <MudButton OnClick="UpdateLatestSearchesAsync" Variant="Variant.Filled" Color="Color.Primary">Get Latest Search</MudButton>
                </MudItem>
            </MudGrid>
            @if(latestSearches != null)
            {
                <SpotifyComponent 
                    Artists="@latestSearches.ArtistsStore.SelectMany(a => a.Items)"
                    Albums="@latestSearches.AlbumsStore.SelectMany(a => a.Items)"
                    Songs="@latestSearches.SongsStore.SelectMany(a => a.Items)">
                </SpotifyComponent>
            }
        </ChildContent>
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private HubConnection connection = null!;

    private IEnumerable<Album>? albums;
    private IEnumerable<Song>? songs;
    private IEnumerable<Artist>? artists;

    private LatestSearches? latestSearches;
    private string? deviceId;

    protected override void OnInitialized()
    {
        var url = "http://spotifyfrontend/notification";
        connection = new HubConnectionBuilder()
            .WithUrl(url)
            .WithAutomaticReconnect()
            .Build();

        connection.On<IEnumerable<Album>>(Constants.AlbumsAvailable, OnAlbumsAvailableAsync);
        connection.On<IEnumerable<Song>>(Constants.SongsAvailable, OnSongsAvailableAsync);
        connection.On<IEnumerable<Artist>>(Constants.ArtistsAvailable, OnArtistsAvailableAsync);
        connection.On<string>(Constants.UpdateDeviceId, SetDeviceId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await connection.StartAsync();
        }
    }

    private async Task OnSelect(string search)
    {
        await daprClient.InvokeMethodAsync(HttpMethod.Get, "spotifybackend", $"api/Spotify/{deviceId}/search?q={search}");
    }

    private void SetDeviceId(string deviceId)
    {
        this.deviceId = deviceId;
        StateHasChanged();
    }

    private Task OnAlbumsAvailableAsync(IEnumerable<Album> @event)
    {
        albums = @event;
        StateHasChanged();

        return Task.CompletedTask;
    }

    private Task OnArtistsAvailableAsync(IEnumerable<Artist> @event)
    {
        artists = @event;
        StateHasChanged();

        return Task.CompletedTask;
    }

    private Task OnSongsAvailableAsync(IEnumerable<Song> @event)
    {
        songs = @event;
        StateHasChanged();

        return Task.CompletedTask;
    }

    private async Task UpdateLatestSearchesAsync()
    {
        // Updates the latest searches.
        latestSearches = await daprClient.InvokeMethodAsync<LatestSearches>(HttpMethod.Get, "spotifybackend", $"api/Spotify/{deviceId}/latest");
        StateHasChanged();
    }
}
